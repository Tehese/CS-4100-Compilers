Scott Canfield
Last 4 of Student Id: 2339
CS 4100 Compilers
Spring 2022
IDE: IntelliJ

0001 
0002 PROGRAM goodtree;
	PRGRM | 	0015 | 	PROGRAM
--> Entering Program
	IDENT | 	0050 | 	goodtree
	SCOLN | 	0036 | 	;
0003 
0004 (* This Part A test file should have NO errors! *)
0005 
0006 BEGIN
	BEGIN | 	0011 | 	BEGIN
 --> Entering Block
0007 { The only statements for Part A are ASSIGNMENTS with EXPRESSIONS }
0008 
0009 total:=(27*first)+ 3.14*radius*radius;
	IDENT | 	0050 | 	total
  --> Entering Statement
   --> Entering handleAssignment
    --> Entering Variable
	ASNMT | 	0037 | 	:=
    <-- Exiting Variable
	LPARA | 	0034 | 	(
    --> Entering SimpleExpression
     --> Entering Term
      --> Entering Factor
	NCINT | 	0051 | 	27
       --> Entering SimpleExpression
        --> Entering Term
         --> Entering Factor
          --> Entering UnsignedConstant
           --> Entering UnsignedNumber
	MULTI | 	0031 | 	*
           <-- Exiting UnsignedNumber
          <-- Exiting UnsignedConstant
         <-- Exiting Factor
         --> Entering Mulop
	IDENT | 	0050 | 	first
         <-- Exiting Mulop
         --> Entering Factor
          --> Entering Variable
	RPARA | 	0035 | 	)
          <-- Exiting Variable
         <-- Exiting Factor
        <-- Exiting Term
       <-- Exiting SimpleExpression
	PLUS_ | 	0032 | 	+
      <-- Exiting Factor
     <-- Exiting Term
     --> Entering Addop
	FCINT | 	0052 | 	3.14
     <-- Exiting Addop
     --> Entering Term
      --> Entering Factor
       --> Entering UnsignedConstant
        --> Entering UnsignedNumber
	MULTI | 	0031 | 	*
        <-- Exiting UnsignedNumber
       <-- Exiting UnsignedConstant
      <-- Exiting Factor
      --> Entering Mulop
	IDENT | 	0050 | 	radius
      <-- Exiting Mulop
      --> Entering Factor
       --> Entering Variable
	MULTI | 	0031 | 	*
       <-- Exiting Variable
      <-- Exiting Factor
      --> Entering Mulop
	IDENT | 	0050 | 	radius
      <-- Exiting Mulop
      --> Entering Factor
       --> Entering Variable
	SCOLN | 	0036 | 	;
       <-- Exiting Variable
      <-- Exiting Factor
     <-- Exiting Term
    <-- Exiting SimpleExpression
   <-- Exiting handleAssignment
  <-- Exiting Statement
0010 a :=(a+c)*(b-d)       ;
	IDENT | 	0050 | 	a
  --> Entering Statement
   --> Entering handleAssignment
    --> Entering Variable
	ASNMT | 	0037 | 	:=
    <-- Exiting Variable
	LPARA | 	0034 | 	(
    --> Entering SimpleExpression
     --> Entering Term
      --> Entering Factor
	IDENT | 	0050 | 	a
       --> Entering SimpleExpression
        --> Entering Term
         --> Entering Factor
          --> Entering Variable
	PLUS_ | 	0032 | 	+
          <-- Exiting Variable
         <-- Exiting Factor
        <-- Exiting Term
        --> Entering Addop
	IDENT | 	0050 | 	c
        <-- Exiting Addop
        --> Entering Term
         --> Entering Factor
          --> Entering Variable
	RPARA | 	0035 | 	)
          <-- Exiting Variable
         <-- Exiting Factor
        <-- Exiting Term
       <-- Exiting SimpleExpression
	MULTI | 	0031 | 	*
      <-- Exiting Factor
      --> Entering Mulop
	LPARA | 	0034 | 	(
      <-- Exiting Mulop
      --> Entering Factor
	IDENT | 	0050 | 	b
       --> Entering SimpleExpression
        --> Entering Term
         --> Entering Factor
          --> Entering Variable
	SUBTR | 	0033 | 	-
          <-- Exiting Variable
         <-- Exiting Factor
        <-- Exiting Term
        --> Entering Addop
	IDENT | 	0050 | 	d
        <-- Exiting Addop
        --> Entering Term
         --> Entering Factor
          --> Entering Variable
	RPARA | 	0035 | 	)
          <-- Exiting Variable
         <-- Exiting Factor
        <-- Exiting Term
       <-- Exiting SimpleExpression
	SCOLN | 	0036 | 	;
      <-- Exiting Factor
     <-- Exiting Term
    <-- Exiting SimpleExpression
   <-- Exiting handleAssignment
  <-- Exiting Statement
0011 
0012 d1 := -b +(b*b) - 4 * a* c / 2.5*a;
	IDENT | 	0050 | 	d1
  --> Entering Statement
   --> Entering handleAssignment
    --> Entering Variable
	ASNMT | 	0037 | 	:=
    <-- Exiting Variable
	SUBTR | 	0033 | 	-
    --> Entering SimpleExpression
     --> Entering Sign
	IDENT | 	0050 | 	b
     <-- Exiting Sign
     --> Entering Term
      --> Entering Factor
       --> Entering Variable
	PLUS_ | 	0032 | 	+
       <-- Exiting Variable
      <-- Exiting Factor
     <-- Exiting Term
     --> Entering Addop
	LPARA | 	0034 | 	(
     <-- Exiting Addop
     --> Entering Term
      --> Entering Factor
	IDENT | 	0050 | 	b
       --> Entering SimpleExpression
        --> Entering Term
         --> Entering Factor
          --> Entering Variable
	MULTI | 	0031 | 	*
          <-- Exiting Variable
         <-- Exiting Factor
         --> Entering Mulop
	IDENT | 	0050 | 	b
         <-- Exiting Mulop
         --> Entering Factor
          --> Entering Variable
	RPARA | 	0035 | 	)
          <-- Exiting Variable
         <-- Exiting Factor
        <-- Exiting Term
       <-- Exiting SimpleExpression
	SUBTR | 	0033 | 	-
      <-- Exiting Factor
     <-- Exiting Term
     --> Entering Addop
	NCINT | 	0051 | 	4
     <-- Exiting Addop
     --> Entering Term
      --> Entering Factor
       --> Entering UnsignedConstant
        --> Entering UnsignedNumber
	MULTI | 	0031 | 	*
        <-- Exiting UnsignedNumber
       <-- Exiting UnsignedConstant
      <-- Exiting Factor
      --> Entering Mulop
	IDENT | 	0050 | 	a
      <-- Exiting Mulop
      --> Entering Factor
       --> Entering Variable
	MULTI | 	0031 | 	*
       <-- Exiting Variable
      <-- Exiting Factor
      --> Entering Mulop
	IDENT | 	0050 | 	c
      <-- Exiting Mulop
      --> Entering Factor
       --> Entering Variable
	DIVID | 	0030 | 	/
       <-- Exiting Variable
      <-- Exiting Factor
      --> Entering Mulop
	FCINT | 	0052 | 	2.5
      <-- Exiting Mulop
      --> Entering Factor
       --> Entering UnsignedConstant
        --> Entering UnsignedNumber
	MULTI | 	0031 | 	*
        <-- Exiting UnsignedNumber
       <-- Exiting UnsignedConstant
      <-- Exiting Factor
      --> Entering Mulop
	IDENT | 	0050 | 	a
      <-- Exiting Mulop
      --> Entering Factor
       --> Entering Variable
	SCOLN | 	0036 | 	;
       <-- Exiting Variable
      <-- Exiting Factor
     <-- Exiting Term
    <-- Exiting SimpleExpression
   <-- Exiting handleAssignment
  <-- Exiting Statement
0013 finval := this - (that*other)
	IDENT | 	0050 | 	finval
  --> Entering Statement
   --> Entering handleAssignment
    --> Entering Variable
	ASNMT | 	0037 | 	:=
    <-- Exiting Variable
	IDENT | 	0050 | 	this
    --> Entering SimpleExpression
     --> Entering Term
      --> Entering Factor
       --> Entering Variable
	SUBTR | 	0033 | 	-
       <-- Exiting Variable
      <-- Exiting Factor
     <-- Exiting Term
     --> Entering Addop
	LPARA | 	0034 | 	(
     <-- Exiting Addop
     --> Entering Term
      --> Entering Factor
	IDENT | 	0050 | 	that
       --> Entering SimpleExpression
        --> Entering Term
         --> Entering Factor
          --> Entering Variable
	MULTI | 	0031 | 	*
          <-- Exiting Variable
         <-- Exiting Factor
         --> Entering Mulop
	IDENT | 	0050 | 	other
         <-- Exiting Mulop
         --> Entering Factor
          --> Entering Variable
	RPARA | 	0035 | 	)
          <-- Exiting Variable
         <-- Exiting Factor
        <-- Exiting Term
       <-- Exiting SimpleExpression
0014 end.
	_END_ | 	0012 | 	end
      <-- Exiting Factor
     <-- Exiting Term
    <-- Exiting SimpleExpression
   <-- Exiting handleAssignment
  <-- Exiting Statement
	PEROD | 	0048 | 	.
 <-- Exiting Block
Success.
<-- Exiting Program
Done.
